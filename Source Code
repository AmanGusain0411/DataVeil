import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk  # Import ttk module for Notebook widget
from PIL import Image
import hashlib

# Function to encode a message into an image
def encode_image(image_path, message, password, output_path):
    try:
        image = Image.open(image_path)
    except Exception as e:
        raise ValueError(f"Error opening image: {e}")

    encoded_image = image.copy()

    if not message:
        raise ValueError("Message cannot be empty.")

    message += '\0'  # Null character to indicate the end of the message

    # Create a hash of the password
    password_hash = hashlib.sha256(password.encode()).hexdigest()

    # Combine password hash and message
    combined_message = password_hash + message
    binary_message = ''.join(format(ord(char), '08b') for char in combined_message)

    data_index = 0
    width, height = encoded_image.size

    # Check if the image is large enough to hold the message
    if len(binary_message) > width * height:
        raise ValueError("Message is too long to encode in this image.")

    # Encode the message by modifying the least significant bit of the red channel
    for y in range(height):
        for x in range(width):
            pixel = list(encoded_image.getpixel((x, y)))

            # Modify the least significant bit of the red channel
            if data_index < len(binary_message):
                pixel[0] = (pixel[0] & ~1) | int(binary_message[data_index])
                data_index += 1

            encoded_image.putpixel((x, y), tuple(pixel))

            if data_index >= len(binary_message):
                encoded_image.save(output_path, format=image.format)
                messagebox.showinfo("Success", f"Message encoded and saved as '{output_path}'.")
                return

    raise ValueError("Message is too long to encode in this image.")

# Function to decode the message from an image
def decode_image(image_path, password):
    try:
        image = Image.open(image_path)
    except Exception as e:
        raise ValueError(f"Error opening image: {e}")

    binary_message = ''
    width, height = image.size

    # Read the image and extract the binary message from the LSB of the red channel
    for y in range(height):
        for x in range(width):
            pixel = image.getpixel((x, y))
            binary_message += str(pixel[0] & 1)  # Extract LSB from the red channel

            # If we've reached the end of the message (null byte '\0' is added to the end)
            if len(binary_message) >= 8 and binary_message[-8:] == '00000000':
                decoded_message = ''.join(chr(int(binary_message[i:i + 8], 2)) for i in range(0, len(binary_message) - 8, 8))
                
                # Separate password hash and actual message
                password_hash = decoded_message[:64]
                original_message = decoded_message[64:]

                # Check if the provided password matches the stored password hash
                if password_hash == hashlib.sha256(password.encode()).hexdigest():
                    return original_message
                else:
                    raise ValueError("Incorrect password.")

    raise ValueError("No hidden message found.")

# Function to open the file dialog and select an image for encoding
def select_image_for_encoding():
    image_path = filedialog.askopenfilename(title="Select Image to Encode")
    if image_path:
        image_path_entry.delete(0, tk.END)  # Clear the entry field
        image_path_entry.insert(0, image_path)  # Insert the selected image path into the entry field

# Function to open the file dialog and select an image for decoding
def select_image_for_decoding():
    image_path = filedialog.askopenfilename(title="Select Image to Decode")
    if image_path:
        decode_image_path_entry.delete(0, tk.END)
        decode_image_path_entry.insert(0, image_path)

# Encode button function
def encode_message():
    image_path = image_path_entry.get()
    message = message_entry.get()
    password = password_entry.get()
    output_path = filedialog.asksaveasfilename(title="Save Encoded Image", defaultextension=".png")
    
    if image_path and message and password and output_path:
        try:
            encode_image(image_path, message, password, output_path)
        except Exception as e:
            messagebox.showerror("Error", str(e))
    else:
        messagebox.showerror("Error", "Please fill in all fields.")

# Decode button function
def decode_message():
    image_path = decode_image_path_entry.get()
    password = password_entry_decode.get()  # This is the password field for decoding

    # Check if password is empty before decoding
    if not password:
        messagebox.showerror("Error", "Please provide the password to decode the message.")
        return

    # Proceed with decoding if password is provided
    if image_path and password:
        try:
            secret_message = decode_image(image_path, password)
            messagebox.showinfo("Decoded Message", secret_message)
        except ValueError as e:
            messagebox.showerror("Error", str(e))
    else:
        messagebox.showerror("Error", "Please provide the encoded image path.")

# Reset function
def reset_fields():
    image_path_entry.delete(0, tk.END)
    message_entry.delete(0, tk.END)
    password_entry.delete(0, tk.END)
    decode_image_path_entry.delete(0, tk.END)
    password_entry_decode.delete(0, tk.END)

# GUI Setup
root = tk.Tk()
root.title("Image Steganography Tool")

# Set up tabs for organization
tab_control = ttk.Notebook(root)  # Use ttk.Notebook for tabs
tab_encode = tk.Frame(tab_control)
tab_decode = tk.Frame(tab_control)

tab_control.add(tab_encode, text='Encode Message')
tab_control.add(tab_decode, text='Decode Message')
tab_control.pack(expand=1, fill="both")

# Encoding Section
tk.Label(tab_encode, text="Select Image to Encode:").pack(pady=5)
image_path_entry = tk.Entry(tab_encode, width=50)
image_path_entry.pack(pady=5)
tk.Button(tab_encode, text="Browse", command=select_image_for_encoding).pack(pady=5)

tk.Label(tab_encode, text="Message to Encode:").pack(pady=5)
message_entry = tk.Entry(tab_encode, width=50)
message_entry.pack(pady=5)

tk.Label(tab_encode, text="Password:").pack(pady=5)
password_entry = tk.Entry(tab_encode, show='*', width=50)
password_entry.pack(pady=5)

tk.Button(tab_encode, text="Encode Message", command=encode_message).pack(pady=10)
tk.Button(tab_encode, text="Reset", command=reset_fields).pack(pady=5)

# Decoding Section
tk.Label(tab_decode, text="Select Encoded Image to Decode:").pack(pady=5)
decode_image_path_entry = tk.Entry(tab_decode, width=50)
decode_image_path_entry.pack(pady=5)
tk.Button(tab_decode, text="Browse", command=select_image_for_decoding).pack(pady=5)

tk.Label(tab_decode, text="Password:").pack(pady=5)
password_entry_decode = tk.Entry(tab_decode, show='*', width=50)
password_entry_decode.pack(pady=5)

tk.Button(tab_decode, text="Decode Message", command=decode_message).pack(pady=10)
tk.Button(tab_decode, text="Reset", command=reset_fields).pack(pady=5)

# Start the GUI
root.mainloop()
